import tkinter as tk
from tkinter import messagebox
import random
import time

# Définir les questions du quiz
questions = [
    {
        "question": "Quelle est la capitale de la France ?",
        "options": ["Paris", "Londres", "Berlin", "Madrid"],
        "answer": "Paris"
    },
    {
        "question": "Quel est le plus grand océan ?",
        "options": ["Atlantique", "Pacifique", "Indien", "Arctique"],
        "answer": "Pacifique"
    },
    # Ajoutez d'autres questions ici
]

# Mélanger les questions
def get_shuffled_questions(questions):
    shuffled_questions = questions[:]
    random.shuffle(shuffled_questions)
    return shuffled_questions

# Sauvegarder les meilleurs scores
def save_high_score(score):
    try:
        with open("high_scores.txt", "r") as file:
            high_scores = [int(line.strip()) for line in file.readlines()]
    except FileNotFoundError:
        high_scores = []

    high_scores.append(score)
    high_scores = sorted(high_scores, reverse=True)[:5]

    with open("high_scores.txt", "w") as file:
        for hs in high_scores:
            file.write(f"{hs}\n")
    
    print("Meilleurs scores :")
    for hs in high_scores:
        print(hs)

# Fonction pour poser une question avec un minuteur
def ask_question_with_timer(question, options, time_limit=10):
    print(question)
    for i, option in enumerate(options):
        print(f"{i + 1}. {option}")
    
    start_time = time.time()
    answer = None
    
    while time.time() - start_time < time_limit:
        if answer:
            break
        answer = input("Choisissez une option (1, 2, 3, 4) : ")
        if not answer.isdigit() or int(answer) not in range(1, 5):
            print("Choix invalide, réessayez.")
            answer = None
    
    if answer is None:
        print("Temps écoulé !")
        return None
    
    return options[int(answer) - 1]

# Classe pour l'application de quiz avec tkinter
class QuizApp:
    def __init__(self, root, questions):
        self.root = root
        self.questions = get_shuffled_questions(questions)
        self.current_question_index = 0
        self.score = 0

        self.question_label = tk.Label(root, text="", wraplength=400)
        self.question_label.pack()

        self.option_vars = [tk.StringVar(value="") for _ in range(4)]
        self.option_buttons = [
            tk.Radiobutton(root, textvariable=self.option_vars[i], value=i, command=self.submit_answer)
            for i in range(4)
        ]
        for button in self.option_buttons:
            button.pack()

        self.next_question()

    def next_question(self):
        if self.current_question_index >= len(self.questions):
            messagebox.showinfo("Fin du Quiz", f"Votre score final est : {self.score}/{len(self.questions)}")
            save_high_score(self.score)
            self.root.quit()
            return
        
        q = self.questions[self.current_question_index]
        self.question_label.config(text=q["question"])
        
        for i, option in enumerate(q["options"]):
            self.option_vars[i].set(option)
        
        self.current_question_index += 1

    def submit_answer(self):
        selected_option = int(next(var.get() for var in self.option_vars if var.get() != ""))
        correct_answer = self.questions[self.current_question_index - 1]["answer"]
        if self.questions[self.current_question_index - 1]["options"][selected_option] == correct_answer:
            self.score += 1
        self.next_question()

# Fonction principale pour exécuter l'application
def main():
    root = tk.Tk()
    root.title("Quiz")
    app = QuizApp(root, questions)
    root.mainloop()

if __name__ == "__main__":
    main()
